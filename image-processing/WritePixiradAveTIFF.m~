function status = WritePixiradAveTIFF(pfname, data_to_write)
% WritePixiradAveTIFF(pfname, data) - write pixirad ave tiff readable by
% GSAS2
%
%   INPUT:
%
%   pfname
%       name of the GE image full file name
%
%   data
%       data to write. 2048 x 2048 x n where n is the number of frames
%
%   OUTPUT:
%
%   status
%       status of the file write
%

%%% MAKE IT INTO UINT16
data_to_write   = uint16(data_to_write);

fname_output_tif_iii    = sprintf('%s_%06d_%06d_ave_1s_norm.tif', ...
    froot_image_iii, fnum_ini, fnum_fin);
pfname_output_tif_iii   = fullfile(path_output_iii, fname_output_tif_iii);

tiff_class  = Tiff(pfname_output_tif_iii, 'w');                                   %create object of Tiff class
setTag(tiff_class, Tiff.TagID.ImageLength,size(flipud(data_to_write),1))              %define image dimentions
setTag(tiff_class, Tiff.TagID.ImageWidth,size(flipud(data_to_write),2))

setTag(tiff_class, 'Photometric', Tiff.Photometric.MinIsBlack)       %define the color type of image

%specifies how image data components are stored on disk
setTag(tiff_class, 'PlanarConfiguration', Tiff.PlanarConfiguration.Chunky);

% Specify how to interpret each pixel sample (IEEEFP works with input doubles)
setTag(tiff_class, 'BitsPerSample', 16);                              %because 1 double = 8byte = 64bits
% setTag(tiff_class, 'SampleFormat', Tiff.SampleFormat.IEEEFP);

tiff_class.write(data_to_write)
tiff_class.close