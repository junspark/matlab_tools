function log = parseGrainData_OneLayer(pname, qsym, varargin)
% NEED TO CHECK THE COORDINATE TRANSFORMATION!!!!
% parseGrainData Parse the hedm grain file
%   In the case of ff-HEDM, input file is from MIDAS grains.csv file.
%
%   log = parseGrainData_OneLayer(pname, qsym) reads the grain log file
%   and returns the information in an array of structures with fields:
%       nExpGvec = Number of expected G vectors
%       nMeasGvec = Number of measured G vectors
%       nMeasOnce = Number of G vectors measured once
%       nMeasMore = Number of G vectors measured more than once
%       meanIA = Average internal angle between prediced and measured
%       U = 3x3 Orientation matrix
%       gvec = G vector table
%       hkl = 3 hkl values
% 
%   The columns of the log file are:
%       Sp_ID O[0][0] O[0][1] O[0][2] O[1][0] O[1][1] O[1][2] O[2][0] O[2][1] O[2][2] 
%       X Y Z a b c alpha beta gamma Err1 Err2 Err3 MeanRadius Confidence 
%       
%       where each row describes a grain
%       
%       O[row][col] is the orientation matrix of the grain that takes crystal frame to
%       ESRF lab coordinate system. 
%       X,Y,Z define the center of mass coordinate of the grain in ESRF
%       lab coordinate system
%       a, b, c, alpha, beta, gamma are the crystal lattice
%       parameters of the grain (NEED TO DESCRIBE HOW THESE ARE DEFINED)
%       Err1, Err2, Err3
%       MeanRadius is the size of the grain
%       Confidence is the completeness of the grain (number of g-vectors
%       found / number of g-vectors anticipated)
%
%   In the case of nf-HEDM, input file is from Ice9 file postprocessed with
%   segmentation routine. This functionality was originally provided by
%   Dave Menasche at Carnegie Mellon University.
%
%   The columns of the input file are:
%       grain id
%       Center of mass (x = along beam, y = OB, z = up)
%       Average Orientation in Bunge convention that transforms a vector
%       in crystal frame to the laboratory frame
%       Volume 
%       AverageConfidence (bug in the segmentation routine) 
%       NumberNeighbors
%       IDsofNeighbors
%       MisorsWithNeighbors
%
%   INPUT:
%
%   pname
%       full file path of the grain log file generated by ff-HEDM MIDAS
%       code
%
%   qsym 
%       Symmetry operators in quaternions
%
%   These arguments can be followed by a list of
%   parameter/value pairs. Options are:
%
%   'Technique'     far-field (ff) or near-field (nf). default is ff.
%   'CrdSystem'     coordinate system in the log file (default is APS)
%	'LabToSample'	rigid body rotation to bring the sample frame coincide 
%					with the laboratory frame. this option only works with 
%					APS CrdSystem for now.
%	'C_xstal' 		single crystal stiffness matrix / tensor to compute the
%					stresses.
%
%   OUTPUT:
%   
%   log
%       content of the grain log file organized into structure array
% 
%   Example:
%     log = parseGrainData(pfname);

% default options
optcell = {...
    'Technique', 'ff-midas', ...
    'NumFrames', 1440, ...
    'CrdSystem', 'APS', ...
    'LabToSample', 0, ...
    'C_xstal', nan, ...
    };

% update option
opts    = OptArgs(optcell, varargin);

disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
if strcmpi(opts.CrdSystem, 'APS')
    disp('COM / orientations / strains will be converted to the APS coordinate system')
elseif strcmpi(opts.CrdSystem, 'ESRF')
    disp('COM / orientations / strains will be in the ESRF coordinate system')
else
    disp('Unknown coordinate system')
    return
end
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')

if strcmpi(opts.CrdSystem, 'APS')
    R_ESRF2APS  = RMatOfQuat(QuatOfESRF2APS);
else
    R_ESRF2APS  = eye(3,3);
end

disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
if (opts.LabToSample == 0)
    disp(sprintf('The LAB FRAME and SAMPLE FRAME are IDENTICAL WHEN OMEGA = %2.1f deg', opts.LabToSample))
elseif (opts.LabToSample ~= 0) 
    disp(sprintf('The LAB FRAME and SAMPLE FRAME are IDENTICAL WHEN OMEGA = %2.1f deg', opts.LabToSample))
end
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
c   = cosd(opts.LabToSample);
s   = sind(opts.LabToSample);
RLab2Sam    = [
    c 0 -s; ...
    0 1 0; ...
    s 0 c; ...
    ];

if strcmpi(opts.Technique, 'ff-midas')
    pfname_hkls     = fullfile(pname, 'hkls.csv');
    pfname_grains   = fullfile(pname, 'Grains.csv');
    pfname_spots    = fullfile(pname, 'SpotMatrix.csv');
    pfname_idrings  = fullfile(pname, 'IDRings.csv');
    
    hkls_csv    = dlmread(pfname_hkls, ' ', 1, 0);
    Grains_csv  = load(pfname_grains);
    Spots_csv   = load(pfname_spots);
    IDRings_csv = dlmread(pfname_idrings, ' ', 1, 0);
    
    nFrames     = opts.NumFrames;
    [hkls, ir]  = unique(hkls_csv(:,5));
    nGrains     = size(Grains_csv, 1);
    
    for i = 1:1:length(hkls)
        fname                   = sprintf('Radius_StartNr_1_EndNr_%d_RingNr_%d.csv', nFrames, hkls(i));
        pfname                  = fullfile(pname, fname);
        RingNr_csv{hkls(i)}    = dlmread(pfname, ' ', 1, 0);
    end
    
    disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
    disp(sprintf('parsing ff-hedm grain data from %s', pfname_grains));
    disp(sprintf('number of grains in this layer : %d', nGrains));
    disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
    disp(sprintf('sorting ff-hedm spots data from %s', pfname_spots));
    disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
    
    nCols       = size(Grains_csv, 2);
    ct          = 1;
    
    disp(sprintf('total number of grains : %d', nGrains));
    log(nGrains) = struct( ...
        'GrainID',[], ...
        'R',[], 'quat',[], 'rod',[], ...
        'COM',[], ...
        'lattprms',[], ...
        'DiffPos',[], 'DiffOme',[], 'DiffAngle',[], ...
        'GrainRadius',[], ...
        'Completeness',[], ...
        'StrainFab',[], 'Strain',[], ...
        'StrainFab_vec', [], 'Strain_vec', [], ...
        'PhaseNumber',[], ...
        'V',[],'Esam',[],'Ecry',[],'F',[], ...
        'ReflectionTable', [],  'CrdSys', []);
    
    % ROTATION FROM MIDAS IS [R]{c} = {l}
    % ROTATOIN TO GO FROM LAB TO SAMPLE IS [RLab2Sam]{l} = {s}
    % [RLab2Sam][R]{c} = [RLab2Sam]{l} = {s}
    for i = 1:1:nGrains
        RMat    = reshape(Grains_csv(i, 2:10), 3, 3)';
        COM     = Grains_csv(i, 11:13);
        
        % COORDINATE TRANSFORMATION
        RMat    = RLab2Sam*R_ESRF2APS*RMat;
        COM     = RLab2Sam*R_ESRF2APS*COM';
        
        if strcmpi(opts.CrdSystem, 'APS')
            log(ct).CrdSys	= 'APS';
        elseif strcmpi(opts.CrdSystem, 'ESRF')
            log(ct).CrdSys	= 'ESRF';
        end
        Quat    = ToFundamentalRegionQ(QuatOfRMat(RMat), qsym);
        Rod     = RodOfQuat(Quat);
        
        log(ct).GrainID = Grains_csv(i,1);
        log(ct).R       = RMat;
        log(ct).rod     = Rod;
        log(ct).quat    = Quat;
        log(ct).COM     = COM(:);
        
        log(ct).lattprms     = Grains_csv(i, 14:19)';
        log(ct).DiffPos      = Grains_csv(i, 20);
        log(ct).DiffOme      = Grains_csv(i, 21);
        log(ct).DiffAngle    = Grains_csv(i, 22);
        log(ct).GrainRadius  = Grains_csv(i, 23);
        log(ct).Completeness = Grains_csv(i, 24);
        
        StrainFab   = reshape(Grains_csv(i, 25:33), 3, 3);
        Strain      = reshape(Grains_csv(i, 34:42), 3, 3);
        
        % CONVERT MICRO-STRAIN TO STRAIN
        log(ct).StrainFab   = RLab2Sam*R_ESRF2APS*StrainFab*R_ESRF2APS'*RLab2Sam'./1000000;
        log(ct).Strain      = RLab2Sam*R_ESRF2APS*Strain*R_ESRF2APS'*RLab2Sam'./1000000;
        
        log(ct).StrainFabUnits  = 'strain';
        log(ct).StrainUnits     = 'strain';
        
        StrainFab_vec       = VectorOfStressStrainMatrixInVM(log(i).StrainFab);
        Strain_vec          = VectorOfStressStrainMatrixInVM(log(i).Strain);
        
        log(ct).StrainFab_vec   = StrainFab_vec;
        log(ct).Strain_vec      = Strain_vec;
        
        if isnan(opts.C_xstal)
            log(ct).StressFab    = nan(6,1);
            log(ct).Stress       = nan(6,1);
            
            log(ct).StressFab_h     = nan;
            log(ct).StressFab_d     = nan(6,1);
            log(ct).StressFab_vm    = nan;
            
            log(ct).Stress_h    = nan;
            log(ct).Stress_d    = nan(6,1);
            log(ct).Stress_vm   = nan;
            
        elseif (size(opts.C_xstal,1) == 6) && (size(opts.C_xstal,2) == 6)
            %%% STRAIN IS IN SAMPLE FRAME
            R   = RLab2Sam*R_ESRF2APS; % [R]{c}={s}
            T   = VectorizedCOBMatrix(R);
            C   = T*opts.C_xstal*T';  % XSTAL STIFFNESS IN SAMPLE FRAME
            
            %%% FAB
            StressFab_vec       = C*StrainFab_vec;
            log(ct).StressFab   	= StressFab_vec;
            log(ct).StressFab_mtx   = MatrixOfStressStrainVectorInVM(StressFab_vec);
            log(ct).StressFab_h     = VolumetricStressStrain(StressFab_vec);
            log(ct).StressFab_d     = DeviatoricStressStrain(StressFab_vec);
            log(ct).StressFab_vm    = VMStressStrain(StressFab_vec);
            
            %%% PK
            Stress_vec          = C*Strain_vec;
            log(ct).Stress    	= Stress_vec;
            log(ct).Stress_mtx  = MatrixOfStressStrainVectorInVM(Stress_vec);
            log(ct).Stress_h    = VolumetricStressStrain(Stress_vec);
            log(ct).Stress_d    = DeviatoricStressStrain(Stress_vec);
            log(ct).Stress_vm   = VMStressStrain(Stress_vec);
        end
        log(ct).StrainRMS   = Grains_csv(i, 43);
        log(ct).C_xstal     = opts.C_xstal;
        
        %%% THIS IS FOR NEWER VERSION OF THE GRAINS OUTPUT
        if nCols > 43
            log(ct).PhaseNumber  = Grains_csv(i, 44);
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% GENERATE REFLECTION TABLE
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        idx = log(ct).GrainID == Spots_csv(:,1);
        
        RingNum = Spots_csv(idx,8);
        SpotID  = Spots_csv(idx,2);
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% SPOT TABLE
        ReflectionTable.Spots_csv_SpotID        = SpotID;
        ReflectionTable.Spots_csv_ome           = Spots_csv(idx,3);
        ReflectionTable.Spots_csv_DetHCrd       = Spots_csv(idx,4);
        ReflectionTable.Spots_csv_DetVCrd       = Spots_csv(idx,5);
        ReflectionTable.Spots_csv_ome_raw       = Spots_csv(idx,6);
        ReflectionTable.Spots_csv_eta           = Spots_csv(idx,7);
        ReflectionTable.Spots_csv_RingNum       = RingNum;
        ReflectionTable.Spots_csv_YLab          = Spots_csv(idx,9);
        ReflectionTable.Spots_csv_ZLab          = Spots_csv(idx,10);
        ReflectionTable.Spots_csv_th            = Spots_csv(idx,11);
        ReflectionTable.Spots_csv_strain_error  = Spots_csv(idx,12);
        
        %%% DERIVED VALUES
        ReflectionTable.Spots_csv_derived_ome_Aero  = -ReflectionTable.Spots_csv_ome;
        ReflectionTable.Spots_csv_derived_tth       = 2.*ReflectionTable.Spots_csv_th;
        ReflectionTable.Spots_csv_derived_eta_vff   = ReflectionTable.Spots_csv_eta;
        ReflectionTable.Spots_csv_derived_eta_hexrd = ConvertMIDASToHEXRD(ReflectionTable.Spots_csv_eta, ...
            'ObjectToConvert', 'eta', 'Units', 'deg');
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% RING TABLE
        for j = 1:1:length(SpotID)
            idx = (IDRings_csv(:,1) == RingNum(j)) & (IDRings_csv(:,3) == SpotID(j));
            ringnum         = IDRings_csv(idx,1);
            spotid_org(j)   = IDRings_csv(idx,2);
            
            disp(sprintf('* grain %d spot %d is from ring number %d spot id %d', ...
                log(ct).GrainID, SpotID(j), ringnum, spotid_org(j)));
            
            idx = RingNr_csv{ringnum}(:,1) == spotid_org(j);
            rt_I_integrated(j,1)    = RingNr_csv{ringnum}(idx,2);
            rt_ome(j,1)             = RingNr_csv{ringnum}(idx,3);
            rt_YCen(j,1)            = RingNr_csv{ringnum}(idx,4);
            rt_ZCen(j,1)            = RingNr_csv{ringnum}(idx,5);
            rt_I_max(j,1)           = RingNr_csv{ringnum}(idx,6);
            rt_ome_min(j,1)         = RingNr_csv{ringnum}(idx,7);
            rt_ome_max(j,1)         = RingNr_csv{ringnum}(idx,8);
            rt_RingRadius(j,1)      = RingNr_csv{ringnum}(idx,9);
            rt_th(j,1)              = RingNr_csv{ringnum}(idx,10);
            rt_eta(j,1)             = RingNr_csv{ringnum}(idx,11);
            rt_dome(j,1)            = RingNr_csv{ringnum}(idx,12);
            rt_nimg(j,1)            = RingNr_csv{ringnum}(idx,13);
            rt_grain_volume(j,1)    = RingNr_csv{ringnum}(idx,14);
            rt_grain_radius(j,1)    = RingNr_csv{ringnum}(idx,15);
            rt_I_pwdr(j,1)          = RingNr_csv{ringnum}(idx,16);
            rt_sig_r(j,1)           = RingNr_csv{ringnum}(idx,17);
            rt_sig_eta(j,1)         = RingNr_csv{ringnum}(idx,18);
            
            %%% HKLS TABLE
            idx = hkls== ringnum;
            
            ht_hkls(j,:)        = abs(hkls_csv(ir(idx),1:3));
            ht_dspacing(j,1)    = hkls_csv(ir(idx),4);
            ht_qvec(j,:)        = abs(hkls_csv(ir(idx),6:8));
            ht_th(j,1)          = hkls_csv(ir(idx),9);
            ht_tth(j,1)         = hkls_csv(ir(idx),10);
            ht_RingRadius(j,1)  = hkls_csv(ir(idx),11);
        end
        
        ReflectionTable.RingNr_csv_I_integrated = rt_I_integrated;
        ReflectionTable.RingNr_csv_ome          = rt_ome;
        ReflectionTable.RingNr_csv_YCen         = rt_YCen;
        ReflectionTable.RingNr_csv_ZCen         = rt_ZCen;
        ReflectionTable.RingNr_csv_I_max        = rt_I_max;
        ReflectionTable.RingNr_csv_ome_min      = rt_ome_min;
        ReflectionTable.RingNr_csv_ome_max      = rt_ome_max;
        ReflectionTable.RingNr_csv_RingRadius   = rt_RingRadius;
        ReflectionTable.RingNr_csv_th           = rt_th;
        ReflectionTable.RingNr_csv_eta          = rt_eta;
        ReflectionTable.RingNr_csv_dome         = rt_dome;
        ReflectionTable.RingNr_csv_nimg         = rt_nimg;
        ReflectionTable.RingNr_csv_grain_volume = rt_grain_volume;
        ReflectionTable.RingNr_csv_grain_radius = rt_grain_radius;
        ReflectionTable.RingNr_csv_I_pwdr       = rt_I_pwdr;
        ReflectionTable.RingNr_csv_sig_r        = rt_sig_r;
        ReflectionTable.RingNr_csv_sig_eta      = rt_sig_eta;
        %%% DERIVED VALUES
        ReflectionTable.RingNr_csv_derived_ome_Aero     = -rt_ome;
        ReflectionTable.RingNr_csv_derived_ome_min_Aero = -rt_ome_max;
        ReflectionTable.RingNr_csv_derived_ome_max_Aero = -rt_ome_min;
        ReflectionTable.RingNr_csv_derived_tth          = 2.*rt_th;
        ReflectionTable.RingNr_csv_derived_eta_vff      = rt_eta;
        ReflectionTable.RingNr_csv_derived_eta_hexrd    = ConvertMIDASToHEXRD(ReflectionTable.RingNr_csv_eta, ...
            'ObjectToConvert', 'eta', 'Units', 'deg');
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% HKL TABLE
        ReflectionTable.hkls_csv_hkls       = ht_hkls;
        ReflectionTable.hkls_csv_dspacing   = ht_dspacing;
        ReflectionTable.hkls_csv_qvec       = ht_qvec;
        ReflectionTable.hkls_csv_th         = ht_th;
        ReflectionTable.hkls_csv_tth        = ht_tth;
        ReflectionTable.hkls_csv_RingRadius = ht_RingRadius;
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        log(ct).ReflectionTable = ReflectionTable;
        ct  = ct + 1;
    end
    
%     COM = [Grains(:).COM]';
%     vm  = [Grains(:).StressFab_vm]';
%     pfname  = 'test.csv';
%     fid = fopen(pfname, 'w');
%     fprintf(fid, 'x,y,z,vm\n');
%     fclose(fid);
%     dlmwrite('test.csv', [COM vm], 'delimiter', ',', '-append')
elseif strcmpi(opts.Technique, 'nf')
    disp(sprintf('parsing nf-hedm data from %s', pfname));
    
    fid = fopen(pfname);
    tline = fgetl(fid);
    counter = 1;
    
    while ischar(tline)
        Grains_csv	= sscanf( tline , '%f', 10)';
        
        COM	= Grains_csv(2:4);
        %%% THIS IS Bunge Angles GOING FROM LAB TO CRYSTAL
        BungeAngles = Grains_csv(5:7)';
        %%% CONVERTS BUNGE ANGLES TO ROT MATRIX THEN TRANSPOSE TO CHANGE
        %%% ITS MEANING TO "CRYSATL TO LAB"
        RMat    = RMatOfBunge(BungeAngles, 'degrees')';
        
        RMat    = R_ESRF2APS*RMat;
        COM     = R_ESRF2APS*COM';
        Quat    = ToFundamentalRegionQ(QuatOfRMat(RMat), qsym);
        
        if strcmpi(opts.CrdSystem, 'APS')
            log(counter).CrdSys	= 'APS';
        elseif strcmpi(opts.CrdSystem, 'ESRF')
            log(counter).CrdSys	= 'ESRF';
        end
        
        log(counter).BungeAngles    = BungeAngles;
        log(counter).RMat           = RMat;
        log(counter).Quat           = Quat;
        log(counter).COM            = COM(:);
        
        log(counter).Volume       = Grains_csv(8);
        log(counter).Confidence   = Grains_csv(9);
        
        log(counter).NumNeighbors	= Grains_csv(10);
        
        B   = sscanf(tline,'%f',10+2*Grains_csv(10));
        log(counter).IDofNeighbors      = B(11:11+Grains_csv(10)-1);
        log(counter).MisWithNeighbors   = B(11+Grains_csv(10):end);
        tline = fgetl(fid);
        counter = counter+1;
    end
    fclose(fid);
end