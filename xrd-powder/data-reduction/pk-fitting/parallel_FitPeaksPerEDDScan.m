function status = parallel_FitPeaksPerEDDScan(edd_iii, edf_cal, pkfit, varargin)
%   USAGE:
%   status = parallel_FitPeaksPerEDDScan(edd_iii)
%
%   INPUT:
%
%   edd_iii
%       ith scan in an EDD struct array generated by readedd5_6bm function.
%       data file have the xy-file format generated from APS 6BM
%
%   edf_cal
%       description of the detector in a strct array with the following
%       fields:
%       tth         diffraction angle or take-off angle
%       polynomial	m-th order polynominal descripting the relationship
%                   between channel number (1-base) and energy (keV). starts with 0-th
%                   order to m-th order.
%
%   pkfit
%       peaks to fit in struct array in unit of d-spacing / Angstrom. Needs
%       to the have following fields:
%       d_pk        peak position initial guess
%       d_LB        lower bound
%       d_UB        upper bound
%
%   OUTPUT:
%
%   status
%       status of the fitting progress. NIL variable.
%
% default options
optcell = {...
    'ShowPlot', false, ...
    'SavePkFitMat', false, ...
    'pfname_mat', 'temp_fit_file.mat', ...
    };

% update option
opts    = OptArgs(optcell, varargin);

numsteps    = edd_iii.motor_start_end_numstep(3);
numdets     = length(edd_iii.data);

d_pk    = pkfit.d_pk;
d_UB    = pkfit.d_UB;
d_LB    = pkfit.d_LB;

numpks  = length(d_pk);

samXE   = zeros(numsteps,1);
samYE   = zeros(numsteps,1);
samZE   = zeros(numsteps,1);
for jjj = 1:1:numsteps
    samXE(jjj)  = edd_iii.motorpos_all(jjj,1);
    samYE(jjj)  = edd_iii.motorpos_all(jjj,2);
    samZE(jjj)  = edd_iii.motorpos_all(jjj,3);
    
    for kkk = 1:1:numdets
        ydata   = edd_iii.data{kkk}(jjj,:);
        xdata   = 1:1:length(ydata);
        xgrid   = polyval(flip(edf_cal(kkk).polynomial), xdata); 
        tth(kkk)    = edf_cal(kkk).tth;
        
        %%% SUM spectra over 10 detectors to use later
        if kkk == 1
            ydata_sum_at_voxel  = ydata;
        else
            ydata_sum_at_voxel  = ydata_sum_at_voxel + ydata;
        end
        
        if opts.ShowPlot
            figure(1)
            clf
            plot(xgrid, ydata)
            hold on
        end
        
        %%% VISIT EACH PEAK in EACH DETECTOR AND FIT
        for mmm = 1:1:numpks
            disp(sprintf('************ fitting spectrum @ step# %d/%d | det# %d/%d | peak# %d/%d', ...
                jjj, numsteps, kkk, numdets, mmm, numpks))
            Epk     = Angstrom2keV(2*d_pk(mmm)*sind(tth(kkk)/2));
            ELB     = Angstrom2keV(2*d_UB(mmm)*sind(tth(kkk)/2));
            EUB     = Angstrom2keV(2*d_LB(mmm)*sind(tth(kkk)/2));
            
            idx     = (xgrid > ELB) & (xgrid < EUB);
            
            xfit_data   = xgrid(idx)';
            yfit_data   = double(ydata(idx))';
            
            pr0 = [ ...
                max(yfit_data)/5 ...
                0.2 ...
                0.5 ...
                Epk ...
                ];
            
            prUB    = [ ...
                inf ...
                inf ...
                1 ...
                EUB ...
                ];
            
            prLB    = [ ...
                0 ...
                0 ...
                0 ...
                ELB ...
                ];
            
            pr0 = [pr0 ...
                0 ...
                (yfit_data(1) + yfit_data(end))/2 ...
                ];
            
            prUB = [prUB ...
                inf ...
                inf ...
                ];
            
            prLB = [prLB ...
                -inf ...
                -inf ...
                ];
            
            pr0     = pr0';
            prUB    = prUB';
            prLB    = prLB';
            
            [pr, rsn{kkk,mmm}(jjj), ~, ef{kkk,mmm}(jjj)]    = lsqcurvefit(@pfunc, pr0, xfit_data, yfit_data, ...
                prLB, prUB);
            
            yfit0   = pfunc(pr0, xfit_data);
            yfit    = pfunc(pr, xfit_data);
            
            if opts.ShowPlot
                figure(1)
                plot(Epk, 20, 'k^')
                plot(ELB, 20, 'r^')
                plot(EUB, 20, 'rv')
                plot(xfit_data, yfit_data, 'r.')
                plot(xfit_data, yfit0, 'g-')
                plot(xfit_data, yfit, 'k-')
                xlabel('E [kev]')
                ylabel('Intensity [cts]')
                grid on
            end
            
            PkInt{kkk, mmm}(jjj)    = trapz(xfit_data, yfit);
            BkgInt{kkk, mmm}(jjj)   = diff(polyval(polyint(pr(5:end)'), [xfit_data(1), xfit_data(end)]));
            
            Aout{kkk, mmm}(jjj) = pr(1);
            Gout{kkk, mmm}(jjj) = pr(2);
            nout{kkk, mmm}(jjj) = pr(3);
            Eout{kkk, mmm}(jjj) = pr(4);
            bkgout{kkk, mmm}(jjj,:) = pr(5:end);
        end
        % return
        % pause(0.05)
        % pause
    end
    
    if opts.ShowPlot
        figure(2)
        clf
        plot(xgrid, ydata_sum_at_voxel)
        hold on
    end
    
    for kkk = 1:1:numpks
        disp(sprintf('************ fitting summed spectrum @ step# %d/%d | peak# %d/%d', ...
            jjj, numsteps, kkk, numpks))
        Epk     = Angstrom2keV(2*d_pk(kkk)*sind(mean(tth)/2));
        ELB     = Angstrom2keV(2*d_UB(kkk)*sind(mean(tth)/2));
        EUB     = Angstrom2keV(2*d_LB(kkk)*sind(mean(tth)/2));
        
        idx     = (xgrid > ELB) & (xgrid < EUB);
        
        xfit_data   = xgrid(idx)';
        yfit_data   = double(ydata_sum_at_voxel(idx))';
        
        pr0 = [ ...
            max(yfit_data)/5 ...
            0.2 ...
            0.5 ...
            Epk ...
            ];
        
        prUB    = [ ...
            inf ...
            inf ...
            1 ...
            EUB ...
            ];
        
        prLB    = [ ...
            0 ...
            0 ...
            0 ...
            ELB ...
            ];
        
        pr0 = [pr0 ...
            0 ...
            (yfit_data(1) + yfit_data(end))/2 ...
            ];
        
        prUB = [prUB ...
            inf ...
            inf ...
            ];
        
        prLB = [prLB ...
            -inf ...
            -inf ...
            ];
        
        pr0     = pr0';
        prUB    = prUB';
        prLB    = prLB';
        
        [pr, rsn_sum_at_voxel(jjj,1), ~, ef_sum_at_voxel(jjj,1)]    = lsqcurvefit(@pfunc, pr0, xfit_data, yfit_data, ...
            prLB, prUB);
        
        yfit0   = pfunc(pr0, xfit_data);
        yfit    = pfunc(pr, xfit_data);
        
        if opts.ShowPlot
            figure(2)
            plot(Epk, 20, 'k^')
            plot(ELB, 20, 'r^')
            plot(EUB, 20, 'rv')
            plot(xfit_data, yfit_data, 'r.')
            plot(xfit_data, yfit0, 'g-')
            plot(xfit_data, yfit, 'k-')
            xlabel('E [kev]')
            ylabel('Intensity [cts]')
            grid on
        end
        
        PkInt_sum_at_voxel(jjj)     = trapz(xfit_data, yfit);
        BkgInt_sum_at_voxel(jjj)    = diff(polyval(polyint(pr(5:end)'), [xfit_data(1), xfit_data(end)]));
        
        Aout_sum_at_voxel(jjj)  = pr(1);
        Gout_sum_at_voxel(jjj)  = pr(2);
        nout_sum_at_voxel(jjj)  = pr(3);
        Eout_sum_at_voxel(jjj)  = pr(4);
        bkgout_sum_at_voxel(jjj,:)  = pr(5:end);
    end
    sum_of_ydata_sum_at_voxel(jjj,1)    = sum(ydata_sum_at_voxel);
end

%%% SAVE PK FIT RESULTS IF REQUESTED
if ~opts.SavePkFitMat
    disp('**** not saving fit results')
elseif opts.SavePkFitMat
    disp(sprintf('**** saving fit results to %s', opts.pfname_mat))
    save(opts.pfname_mat, ...
        'samXE', 'samYE', 'samZE', ...
        'Aout', 'Gout', 'nout', 'Eout', 'bkgout', 'rsn', 'ef', 'PkInt', 'BkgInt', ...
        'Aout_sum_at_voxel', 'Gout_sum_at_voxel', 'nout_sum_at_voxel', 'Eout_sum_at_voxel', 'bkgout_sum_at_voxel', ...
        'rsn_sum_at_voxel', 'ef_sum_at_voxel', 'PkInt_sum_at_voxel', 'bkgout_sum_at_voxel', ...
        'sum_of_ydata_sum_at_voxel')
end
status = 1;