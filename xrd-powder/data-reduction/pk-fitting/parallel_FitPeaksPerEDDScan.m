function status = parallel_FitPeaksPerEDDScan(edd_iii, edf_cal, pkfit, varargin)
%   USAGE:
%   status = parallel_FitPeaksPerEDDScan(edd_iii)
%
%   INPUT:
%
%   edd_iii
%       ith scan in an EDD struct array generated by readedd5_6bm function.
%       data file have the xy-file format generated from APS 6BM
%
%   edf_cal
%       description of the detector in a strct array with the following
%       fields:
%       tth         diffraction angle or take-off angle
%       polynomial	m-th order polynominal descripting the relationship
%                   between channel number (1-base) and energy (keV). starts with 0-th
%                   order to m-th order.
%
%   pkfit
%       peaks to fit in struct array in unit of d-spacing / Angstrom. Needs
%       to the have following fields:
%       d_pk        peak position initial guess
%       d_LB        lower bound
%       d_UB        upper bound
%   
%   optional inputs and default values
%       'ShowPlot', false, ...
%       'SavePkFitMat', false, ...
%       'pfname_mat', 'temp_fit_file.mat', ...
%
%   OUTPUT:
%
%   status
%       status of the fitting progress. NIL variable.
%
% default options
optcell = {...
    'ShowPlot', false, ...
    'SavePkFitMat', false, ...
    'pfname_mat', 'temp_fit_file.mat', ...
    };

% update option
opts    = OptArgs(optcell, varargin);

numsteps    = edd_iii.motor_start_end_numstep(3);
numdets     = length(edd_iii.data);

d_pk    = pkfit.d_pk;
d_UB    = pkfit.d_UB;
d_LB    = pkfit.d_LB;

numpks  = length(d_pk);

samXE   = zeros(numsteps,1);
samYE   = zeros(numsteps,1);
samZE   = zeros(numsteps,1);
for jjj = 1:1:numsteps
    samXE(jjj)  = edd_iii.motorpos_all(jjj,1);
    samYE(jjj)  = edd_iii.motorpos_all(jjj,2);
    samZE(jjj)  = edd_iii.motorpos_all(jjj,3);
    
    for kkk = 1:1:numdets
        ydata   = edd_iii.data{kkk}(jjj,:);
        xdata   = 1:1:length(ydata);
        xgrid   = polyval(flip(edf_cal(kkk).polynomial), xdata); 
        tth(kkk)    = edf_cal(kkk).tth;
        
        %%% SUM spectra over 10 detectors to use later
        if kkk == 1
            sum_of_all_ydata_at_voxel   = ydata;
        else
            sum_of_all_ydata_at_voxel   = sum_of_all_ydata_at_voxel + ydata;
        end
        
        if opts.ShowPlot
            figure(1)
            clf
            plot(xgrid, ydata)
            hold on
        end
        
        %%% VISIT EACH PEAK IN EACH DETECTOR AND FIT
        for mmm = 1:1:numpks
            disp(sprintf('************ fitting spectrum @ step# %d/%d | det# %d/%d | peak# %d/%d', ...
                jjj, numsteps, kkk, numdets, mmm, numpks))
            Epk     = Angstrom2keV(2*d_pk(mmm)*sind(tth(kkk)/2));
            ELB     = Angstrom2keV(2*d_UB(mmm)*sind(tth(kkk)/2));
            EUB     = Angstrom2keV(2*d_LB(mmm)*sind(tth(kkk)/2));
            
            idx     = (xgrid > ELB) & (xgrid < EUB);
            
            xfit_data   = xgrid(idx)';
            yfit_data   = double(ydata(idx))';
            
            pr0 = [ ...
                max(yfit_data)/5 ...
                1.0...
                0.5 ...
                Epk ...
                ];
            
            prUB    = [ ...
                inf ...
                5 ...
                1 ...
                EUB ...
                ];
            
            prLB    = [ ...
                0 ...
                0 ...
                0 ...
                ELB ...
                ];
            
            pr0 = [pr0 ...
                polyfit([xfit_data(1) xfit_data(end)], [yfit_data(1) yfit_data(end)], 1) ...
                ];
            
            prUB = [prUB ...
                inf ...
                inf ...
                ];
            
            prLB = [prLB ...
                -inf ...
                -inf ...
                ];
            
            pr0     = pr0';
            prUB    = prUB';
            prLB    = prLB';
            
            [pr, rsn_at_voxel{kkk}(jjj,mmm), ...
                resd_at_voxel{kkk}{jjj,mmm}, ...
                ef_at_voxel{kkk}(jjj,mmm), ~, ~, ...
                jacobian_at_voxel{kkk}{jjj,mmm}]   = lsqcurvefit(@pfunc, pr0, xfit_data, yfit_data, ...
                prLB, prUB);
            
            yfit0   = pfunc(pr0, xfit_data);
            yfit    = pfunc(pr, xfit_data);
            
            xfit_data_at_voxel{kkk}{jjj,mmm}    = xfit_data;
            yfit_data_at_voxel{kkk}{jjj,mmm}    = yfit_data;
            yfit0_at_voxel{kkk}{jjj,mmm}        = yfit0;
            yfit_at_voxel{kkk}{jjj,mmm}         = yfit;
            
            [conf, variance]    = confint(pr, resd_at_voxel{kkk}{jjj,mmm}, jacobian_at_voxel{kkk}{jjj,mmm}); % variance of fitted params
            variance            = full(variance);
            
            pkfit_int_at_voxel{kkk}(jjj,mmm)    = trapz(xfit_data, yfit);
            bkgfit_int_at_voxel{kkk}(jjj,mmm)   = trapz(xfit_data, polyval(pr(5:end), xfit_data));
            
            Afit_at_voxel{kkk}(jjj,mmm)                 = pr(1);
            Afit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(1));
            Afit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(1,2) - conf(1,1);
            
            Gfit_at_voxel{kkk}(jjj,mmm)                 = pr(2);
            Gfit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(2));
            Gfit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(2,2) - conf(2,1);
            
            nfit_at_voxel{kkk}(jjj,mmm)                 = pr(3);
            nfit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(3));
            nfit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(3,2) - conf(3,1);
            
            Efit_at_voxel{kkk}(jjj,mmm)                 = pr(4);
            Efit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(4));
            Efit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(4,2) - conf(4,1);
            
            bkgfit_at_voxel{kkk}{jjj,mmm}               = pr(5:end);
            bkgfit_at_voxel_errorbar{kkk}{jjj,mmm}      = sqrt(variance(5:end));
            bkgfit_at_voxel_conf95_range{kkk}{jjj,mmm}  = conf(5:end,2) - conf(5:end,1);
            
            rwp_at_voxel{kkk}(jjj,mmm)  = ErrorRwp(yfit_data, yfit);
            re_at_voxel{kkk}(jjj,mmm)   = ErrorRe(yfit_data, yfit);
            rp_at_voxel{kkk}(jjj,mmm)   = ErrorRp(yfit_data, yfit);
            
            str2show    = {sprintf('intensity= %f +- %f', pr(1), sqrt(variance(1))), ...
                sprintf('fwhm= %f +- %f',pr(2), sqrt(variance(2))), ...
                sprintf('fract. lorentzian= %f +- %f',pr(3), sqrt(variance(3))), ...
                sprintf('center= %f +- %f',pr(4), sqrt(variance(4))), ...
                };
            
            disp(cell2table(str2show'))
            if opts.ShowPlot
                figure(1)
                plot(Efit_at_voxel{kkk}(jjj,mmm), 20, 'k^')
                % plot(ELB, 20, 'rs')
                % plot(EUB, 20, 'rs')
                plot(xfit_data, yfit_data, 'r.')
                plot(xfit_data, polyval(pr0(5:end), xfit_data), 'g-.')
                plot(xfit_data, yfit0, 'g-')
                plot(xfit_data, yfit, 'k-')
                plot(xfit_data, polyval(pr(5:end), xfit_data), 'k--')
                xlabel('E [kev]')
                ylabel('Intensity [cts]')
                grid on
                
                text(0.05,0.85,str2show, 'Units', 'normalized')
            end
        end
        
        idx     = (xgrid > min(ELB)) & (xgrid < max(EUB));
        ydata_sum_at_voxel{kkk}(jjj,1)  = sum(ydata(idx));
    end
    
    %%% FIT PEAKS ON THE SUMMED SPECTRUM
    %%% DESIGNATE THIS AS [numdets + 1]
    if opts.ShowPlot
        figure(2)
        clf
        plot(xgrid, sum_of_all_ydata_at_voxel)
        hold on
    end
    
    kkk = numdets + 1;
    for mmm = 1:1:numpks
        disp(sprintf('************ fitting summed spectrum @ step# %d/%d | peak# %d/%d', ...
            jjj, numsteps, mmm, numpks))
        Epk     = Angstrom2keV(2*d_pk(mmm)*sind(mean(tth)/2));
        ELB     = Angstrom2keV(2*d_UB(mmm)*sind(mean(tth)/2));
        EUB     = Angstrom2keV(2*d_LB(mmm)*sind(mean(tth)/2));
        
        idx     = (xgrid > ELB) & (xgrid < EUB);
        
        xfit_data   = xgrid(idx)';
        yfit_data   = double(sum_of_all_ydata_at_voxel(idx))';
        
        pr0 = [ ...
            max(yfit_data)/5 ...
            0.2 ...
            0.5 ...
            Epk ...
            ];
               
        prUB    = [ ...
            inf ...
            3 ...
            1 ...
            EUB ...
            ];
        
        prLB    = [ ...
            0 ...
            0 ...
            0 ...
            ELB ...
            ];

        pr0 = [pr0 ...
            polyfit([xfit_data(1) xfit_data(end)] , [yfit_data(1) yfit_data(end)], 1) ...
            ];

        prUB = [prUB ...
            inf ...
            inf ...
            ];
        
        prLB = [prLB ...
            -inf ...
            -inf ...
            ];
        
        pr0     = pr0';
        prUB    = prUB';
        prLB    = prLB';
        
        [pr, rsn_at_voxel{kkk}(jjj,mmm), ...
            resd_at_voxel{kkk}{jjj,mmm}, ...
            ef_at_voxel{kkk}(jjj,mmm), ~, ~, ...
            jacobian_at_voxel{kkk}{jjj,mmm}]   = lsqcurvefit(@pfunc, pr0, xfit_data, yfit_data, ...
            prLB, prUB);
        
        yfit0   = pfunc(pr0, xfit_data);
        yfit    = pfunc(pr, xfit_data);
        
        xfit_data_at_voxel{kkk}{jjj,mmm}    = xfit_data;
        yfit_data_at_voxel{kkk}{jjj,mmm}    = yfit_data;
        yfit0_at_voxel{kkk}{jjj,mmm}        = yfit0;
        yfit_at_voxel{kkk}{jjj,mmm}         = yfit;
        
        [conf, variance]    = confint(pr, resd_at_voxel{kkk}{jjj,mmm}, jacobian_at_voxel{kkk}{jjj,mmm}); % variance of fitted params
        variance            = full(variance);
        
        pkfit_int_at_voxel{kkk}(jjj,mmm)    = trapz(xfit_data, yfit);
        bkgfit_int_at_voxel{kkk}(jjj,mmm)   = trapz(xfit_data, polyval(pr(5:end), xfit_data));
        
        Afit_at_voxel{kkk}(jjj,mmm)                 = pr(1);
        Afit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(1));
        Afit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(1,2) - conf(1,1);
        
        Gfit_at_voxel{kkk}(jjj,mmm)                 = pr(2);
        Gfit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(2));
        Gfit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(2,2) - conf(2,1);
        
        nfit_at_voxel{kkk}(jjj,mmm)                 = pr(3);
        nfit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(3));
        nfit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(3,2) - conf(3,1);

        Efit_at_voxel{kkk}(jjj,mmm)                 = pr(4);
        Efit_at_voxel_errorbar{kkk}(jjj,mmm)        = sqrt(variance(4));
        Efit_at_voxel_conf95_range{kkk}(jjj,mmm)    = conf(4,2) - conf(4,1);

        bkgfit_at_voxel{kkk}{jjj,mmm}               = pr(5:end);
        bkgfit_at_voxel_errorbar{kkk}{jjj,mmm}      = sqrt(variance(5:end));
        bkgfit_at_voxel_conf95_range{kkk}{jjj,mmm}  = conf(5:end,2) - conf(5:end,1);
        
        rwp_at_voxel{kkk}(jjj,mmm)  = ErrorRwp(yfit_data, yfit);
        re_at_voxel{kkk}(jjj,mmm)   = ErrorRe(yfit_data, yfit);
        rp_at_voxel{kkk}(jjj,mmm)   = ErrorRp(yfit_data, yfit);
        
        str2show    = {sprintf('intensity= %f +- %f', pr(1), sqrt(variance(1))), ...
            sprintf('fwhm= %f +- %f',pr(2), sqrt(variance(2))), ...
            sprintf('fract. lorentzian= %f +- %f',pr(3), sqrt(variance(3))), ...
            sprintf('center= %f +- %f',pr(4), sqrt(variance(4))), ...
            };
        disp(cell2table(str2show'))
        if opts.ShowPlot
            figure(2)
            plot(Efit_at_voxel{kkk}(jjj,mmm), 20, 'k^')
            % plot(ELB, 20, 'rs')
            % plot(EUB, 20, 'rs')
            plot(xfit_data, yfit_data, 'r.')
            plot(xfit_data, polyval(pr0(5:end), xfit_data), 'g-.')
            plot(xfit_data, yfit0, 'g-')
            plot(xfit_data, yfit, 'k-')
            plot(xfit_data, polyval(pr(5:end), xfit_data), 'k--')
            xlabel('E [kev]')
            ylabel('Intensity [cts]')
            grid on
            
            text(0.05,0.85,str2show, 'Units', 'normalized')
        end
    end
    
    idx     = (xgrid > min(ELB)) & (xgrid < max(EUB));
    ydata_sum_at_voxel{kkk}(jjj,1)  = sum(sum_of_all_ydata_at_voxel(idx));
end

%%% SAVE PK FIT RESULTS IF REQUESTED
if ~opts.SavePkFitMat
    disp('**** not saving fit results')
elseif opts.SavePkFitMat
    disp(sprintf('**** saving fit results to %s', opts.pfname_mat))
    save(opts.pfname_mat, ...
        'samXE', 'samYE', 'samZE', ...
        'pkfit', 'numpks', 'numdets', 'numsteps', ...
        'xfit_data_at_voxel', 'yfit_data_at_voxel', 'yfit0_at_voxel', 'yfit_at_voxel', 'ydata_sum_at_voxel', ...
        'Afit_at_voxel', 'Gfit_at_voxel', 'nfit_at_voxel', 'Efit_at_voxel', 'bkgfit_at_voxel', ...
        'Afit_at_voxel_errorbar', 'Gfit_at_voxel_errorbar', 'nfit_at_voxel_errorbar', 'Efit_at_voxel_errorbar', 'bkgfit_at_voxel_errorbar', ...
        'Afit_at_voxel_conf95_range', 'Gfit_at_voxel_conf95_range', 'nfit_at_voxel_conf95_range', 'Efit_at_voxel_conf95_range', 'bkgfit_at_voxel_conf95_range', ...
        'rwp_at_voxel', 're_at_voxel', 'rp_at_voxel', 'rsn_at_voxel', 'resd_at_voxel', 'ef_at_voxel', 'jacobian_at_voxel', ...
        'pkfit_int_at_voxel', 'bkgfit_int_at_voxel')
end
status = 1;
